dir.creat(old.dir)
dir.create(old.dir)
dir.create("testdir")
setwd(testdir)
setwd("testdir)
v
ff""
"f""'''"
setwd("testdir")
getwd()
file.create("mytest.R")
list.files()
files.exists("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
play()
ls()
list.files()
nxt()
dir.create("testdir2",recursive="TRUE")
dir.create(("testdir2","testdir3"),recursive="TRUE")
dir.create(("testdir2","testdir3"),recursive=TRUE)
dir.create(('testdir2','testdir3'),recursive=TRUE)
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
list.files()
unlink("testdir",recursive=TRUE)
q
quit()
swirl()
library(swirl)
swirl()
2
quit()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y<-[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patient, my_matrix)
cbind(patients, my_matrix)
my_data <- data.fram(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5!=7
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical ("twins","twins")
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function")
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num =5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8,8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluare(function(x){x+1},6)
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram(hello)
telegram("hello")
submit()
mad_libs("Reading","beautiful","John")
submit()
`I%p%love%p%R`
`I %p% love `
`I %p% love %p% R!`
"I" %p% "Love" %p%"R!"
"I" %p% "love" %p% "R!"
swirl()
head(flags)
dim(flags)
class(flass)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(col(flags), unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flag$animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrwo(plants)
nrow(plants)
ncol(plants)
object.size(plants)
name(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
(1/6)^4
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips==1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom (100, size =1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean =100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<- as.Date(1969-01-01)
d2<- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<- POSIXlt(Sys.time())
t2<- POSIX1t(Sys.time())
t2<- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(), t1, units ='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x= cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab ="Speed", ylab="Stopping Distance")
plot(cars, title= "My Plot")
plot(cars, main= "My Plot")
plot(cars, sub= "My Plot Subtitle")
?par
plot(cars, col=2)
plot(cars, xlim= c(10,15))
plot(cars, pch =2)
data(mtcars)
?boxplot
boxplot(formula = mpg~cyl, data=mtcars)
hist(mtcars$mpg)
quit
quit()
library(devtools)
install_github("amplab-extras/SparkR-pkg", subdir="pkg")
library(sparkR)
library(SparkR)
library(testthat)
?install.packages
install.packages('amplab-extras-SparkR-pkg-91cc42d.tar.gz', lib='C:\Users\Kianim\Documents\Spark',repos = NULL)
install.packages('amplab-extras-SparkR-pkg-91cc42d.tar.gz', lib="C:\Users\Kianim\Documents\Spark",repos = NULL)
install.packages('amplab-extras-SparkR-pkg-91cc42d.tar.gz', lib="C:\",repos = NULL)
l
pp
""
)
]
q
quit
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind,Ozone))
help(with)
par(lty)
par("lty")
par("col")
par("pch")
x <- rnorm(100)
hist(x)
y <- rnorm(100)
hist(x,y)
plot(x,y)
par(mar = c(2,2,2,2))
plot(x,y)
plot(x,y, pch=20)
plot(x,y, pch=4)
example(points)
windows()
dev.cur()
x<- 1:4
p<- x/sum(x)
sum(p)
temp<- rbind(x,p)
temp
rownames(temp) <- c ("X", "Prob")
meanX <- sum (x*p)
.75/.3
pnorm(70,mean = 80, sd =10)
pnorm
pnorm(-1)
qnorm
qnorm(.95, mean =1100, sd = 75)
qnorm(.95, mean =1100, sd = 7.5)
pbinom
pbinom(3,5,.5,lower.tail=FALSE)
ppois
ppois(10, 5*3)
library(datasets)
data(mtcars)
head(mtcars)
plot(mtcars$mpg)
plot(mtcars$mpg, lty =l)
plot(mtcars$mpg, lty ="l")
plot(mtcars$mpg, lty ='l')
plot(mtcars$mpg, lty =2)
plot(mtcars$mpg, lty =4)
plot(mtcars$mpg, lty =6)
plot(mtcars$mpg, lty =8)
plot(mtcars$mpg, lty =1)
plot(mtcars$mpg, lty =3)
attach(mtcars)
mean(mpg)
sd(mpg)
t.test(mpg)
qt
head(mtcars)
?subset
data <- subset(mtcars, mtcars$cyl == c(4,6), mtcars$mpg)
data <- subset(mtcars, mtcars$cyl == c(4,6))
head(data)
t.test(data$mpg)
round(t.test(data$mpg)$conf.int)
c4 = mtcars$mpg[mtcars$cyl=4]
c4 = mtcars$mpg[mtcars$cyl==4]
c6 = mtcars$mpg[mtcars$cyl==6]
t.test(c4,c6,var.equal=TRUE)
t.test
?t.test
?qt
1100 + c(1,-1)*.975*30
1100 + c(1,-1)*.95*30
1100 + c(1,-1)*.975*10
1100 + c(1,-1)*.975*10
1100 + c(1,-1)*.95*10
1100 + c(1,-1)*.975*10
?qt
qt
qt(0.975,8)
6/2.306004
t.test
t.test(10)
t.test
.6+.68
1.28/2
-2+c(1,-1)*.975*.64/sqrt(10)
-2+c(1,-1)*.975*.64/sqrt(20)
-2+c(1,-1)*.975*sqrt(.64/20)
-2+c(1,-1)*.975*sqrt(.64/10)
-2+c(1,-1)*.975*sqrt(.60/10)
-2+c(1,-1)*.975*sqrt(.68/10)
-2+c(1,-1)*.975*sqrt(.68/20)
t.test
9*.6 + 9*0.68
11.52/18
.6/10 + .68/10
sqrt(.128)
-2+c(1,-1)*.975*.3578
-2+c(1,-1)*.975*.64
-2+c(1,-1)*.975*sqrt(.64)
round(-2+c(1,-1)*.975*sqrt(.64))
round(-2+c(1,-1)*.975*sqrt(.64),2)
round(-2+c(1,-1)*.975*sqrt(.64),1)
sqrt(.5^2/100+2^2/100)
2+c(1,-1)*.975*.206
1100+c(1,-1)*.975*30
qt(.95,9)
1100+c(1,-1)*1.833*30
1100+c(1,-1)*1.833*10
qt(90,9)
qt(.90,9)
-4+c(1,-1)*1.383*sqrt(1.5^2/9+1.8^2/9)
qt(.95,9)
1100+c(1,-1)*1.833113*30
1100+c(1,-1)*1.833113*30/3
1100+c(1,-1)*1.833113*30/3
1100+c(1,-1)*1.83*30/3
1100-1077
30/23
23/30
1.833/.7667
sqrt(8)
1100+c(1,-1)*1.83*30/sqrt(8)
1100+c(1,-1)*1.83*30/sqrt(9)
1100+c(1,-1)*1.83*30/sqrt(8)
qt(.95,8)
1100+c(1,-1)*1.86*30/sqrt(9)
1100+c(1,-1)*1.8596*30/sqrt(9)
methods(t.test)
t.test.formula
t.test()
t.test
?t.test
t.test(1, method = "t.test.formula")
title: "R Markdown Demonstration"
setwd("~/CourseEra/ReproducibleResearch/RepData_PeerAssessment1")
zipfile <- unzip("activity.zip")
adata <- read.csv("activity.csv", na.strings = "NA", header = T)
options(scipen=999)
meanact <- tapply( adata$steps, adata$interval, mean, na.rm = TRUE)
splitdata <- split(adata$steps, factor(adata$interval))
for (i in 1: length(splitdata)){
splitdata[[i]][is.na(splitdata[[i]])] <- meanact[[i]]
}
meansteps <- unsplit(splitdata, adata$interval)
meandata <- adata
meandata$steps <- meansteps
dow <- as.POSIXlt(as.Date(meandata$date))$wday
meandata$day <- dow
meandata$day <- as.numeric(meandata$day)
meandata$day[meandata$day == 1| meandata$day ==2 | meandata$day ==3 | meandata$day ==4 | meandata$day ==5] <- "Weekday"
meandata$day[meandata$day ==0 | meandata$day ==6] <- "Weekend"
meandata$day <- factor (meandata$day)
weekact <- tapply( meandata$steps, meandata$day, mean)
weekact <- tapply( meandata$steps, meandata$day, sum)
weeksteps <- subset(meandata$steps, meandata$day == "weekday" )
?subset
View(meandata)
weeksteps <- subset(meandata$steps, meandata$day == "Weekday" )
weekact <- tapply( weeksteps, meandata$interval, sum)
weekact <- tapply( meandata$steps[meandata$day == "Weekday"], meandata$interval, sum)
weekdata <- meandata[meandata$day=="Weekday"]
weekdata <- subset(meandata,meandata$day=="Weekday"])
weekdata <- subset(meandata,meandata$day=="Weekday")
weekdata <- subset(meandata,meandata$day=="Weekday")
weekenddata <- subset(meandata,meandata$day=="Weekend")
meanweekact <- tapply( weekdata$steps, weekdata$interval, mean)
meanweekact <- tapply( weekdata$steps, weekdata$interval, mean)
meanweekendact <- tapply( weekenddata$steps, weekenddata$interval, mean)
?panel.smooth
par = mfrow (2,1)
plot(ilevels, meanweekact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
ilevels <- levels(factor(adata$interval))
par = mfrow (2,1)
plot(ilevels, meanweekact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
par(mfrow =c(2,1))
plot(ilevels, meanweekact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
library(lattice)
ilevels <- levels(factor(adata$interval))
xyplot(ilevels~ meanweekact|meanweekednact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
ilevels <- levels(factor(adata$interval))
xyplot(ilevels~ meanweekact|meanweekendnact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
ilevels <- levels(factor(adata$interval))
xyplot(ilevels~ meanweekact|meanweekendact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
ilevels <- levels(factor(adata$interval))
densityplot(ilevels~ meanweekact|meanweekendact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
ilevels <- levels(factor(adata$interval))
par(mfeow = c(2,1))
plot(ilevels~ meanweekact|meanweekendact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
par(mfrow = c(2,1))
par(mar=c(1,1,1,1))
plot(ilevels~ meanweekact|meanweekendact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
ilevels <- levels(factor(adata$interval))
par(mfrow = c(2,1))
par(mar=c(1,1,1,1))
plot(ilevels, meanweekact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
ilevels <- levels(factor(adata$interval))
par(mfrow = c(2,1))
par(mar=c(1,1,1,1))
plot(ilevels, meanweekact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
plot(ilevels, meanweekendact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
ilevels <- levels(factor(meandata$interval))
par(mfrow = c(2,1))
par(mar=c(1,1,1,1))
plot(ilevels, meanweekact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
plot(ilevels, meanweekendact, type = "l", xlab = "Intervals", ylab = "Average number of steps")
?mar
?para
?par
?xyplot
